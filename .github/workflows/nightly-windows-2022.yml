name: nightly-windows-2022
env:
  name: staging_environment

concurrency: staging_environment

on:
  push:
    paths:
      - "**/nightly-windows-2022.yml"
#
jobs:
  test-1:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
        os: [windows-2022]
        node-version: [14]
    environment: 
      name: CICD
    env:
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: Get short SHA 🔑
        id: slug
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
        shell: bash

      - name: Checkout ${{ steps.slug.outputs.sha7 }} ⬇️   
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      
      - name: Get last commit date
        id: vars
        run: |
          git fetch --prune --unshallow
          echo "::set-output name=date::$(git log -1 --date=format:'%Y%m%d' --format='%cd')"
          echo "::set-output name=tag::$(git describe --abbrev=0 --tags)"
        shell: bash

      - name: Get last Release
        id: keydb
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: tanshuai
          repo: alphabiz
          excludes: prerelease, draft

      - name: Checkout vars-date ${{ steps.vars.outputs.date }} ⬇️
        run: |
          echo "${{ steps.vars.outputs.date }}"
          echo "${{ steps.vars.outputs.tag }}"
          echo "${{ steps.keydb.outputs.release }}"

      - name: Install dependencies 👨🏻‍💻
        run: yarn install

      - name: Install winappdriver.msi
        run: | 
          Invoke-WebRequest "https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi" -OutFIle "C:\WindowsApplicationDriver_1.2.1.msi"
          Start-Process msiexec -ArgumentList "/quiet","/x","{087BBF93-D9E3-4D27-BDBE-9C702E0066FC}" -Verb runAs -Wait
          Start-Process msiexec -ArgumentList "/quiet","/i","C:\WindowsApplicationDriver_1.2.1.msi" -Verb runAs -Wait
          Start-Sleep -s 5
        shell: powershell

      - name: Install Alphabiz
        run: |
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{ steps.keydb.outputs.release }}/alphabiz-windows-self-hosted-${{ steps.keydb.outputs.release }}.7z > alphabiz.7z
          7z x alphabiz.7z
        shell: bash

      - name: Run appium
        run: |
          Start-Process PowerShell -ArgumentList "yarn test:appium"
          Start-Sleep -s 10

      - name: Run release test 🧪
        run: yarn run jest

      - name: Win1 run release test creditsUpload 🧪
        run: yarn test:release:creditsUpload
      
      - name: Upload Test Results 🗃
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "output1"
          path: output/**

  test-2:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
        os: [windows-2022]
        node-version: [14]
    environment: 
      name: CICD
    env:
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: Get short SHA 🔑
        id: slug
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
        shell: bash

      - name: Checkout ${{ steps.slug.outputs.sha7 }} ⬇️   
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}

      - name: Get last commit date
        id: vars
        run: |
          git fetch --prune --unshallow
          echo "::set-output name=date::$(git log -1 --date=format:'%Y%m%d' --format='%cd')"
          echo "::set-output name=tag::$(git describe --abbrev=0 --tags)"
        shell: bash

      - name: Get last Release
        id: keydb
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: tanshuai
          repo: alphabiz
          excludes: prerelease, draft

      - name: Checkout vars-date ${{ steps.vars.outputs.date }} ⬇️
        run: |
          echo "${{ steps.vars.outputs.date }}"
          echo "${{ steps.vars.outputs.tag }}"
          echo "${{ steps.keydb.outputs.release }}"

      - name: Install dependencies 👨🏻‍💻
        run: yarn install

      - name: Install winappdriver.msi
        run: | 
          Invoke-WebRequest "https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi" -OutFIle "C:\WindowsApplicationDriver_1.2.1.msi"
          Start-Process msiexec -ArgumentList "/quiet","/x","{087BBF93-D9E3-4D27-BDBE-9C702E0066FC}" -Verb runAs -Wait
          Start-Process msiexec -ArgumentList "/quiet","/i","C:\WindowsApplicationDriver_1.2.1.msi" -Verb runAs -Wait
          Start-Sleep -s 5
        shell: powershell

      - name: Install Alphabiz
        run: |
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{ steps.keydb.outputs.release }}/alphabiz-windows-${{ steps.keydb.outputs.release }}.7z > alphabiz.7z
          7z x alphabiz.7z
        shell: bash

      - name: Run appium
        run: |
          Start-Process PowerShell -ArgumentList "yarn test:appium"
          Start-Sleep -s 10

      - name: Win2 run release test creditsDownload 🧪
        run: yarn test:release:creditsDownload

      - name: Upload Test Results 🗃
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "output2"
          path: output/**