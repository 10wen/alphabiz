name: CI/CT for each push
# env:
#   name: staging_environment

# concurrency: staging_environment

on:
  schedule:
    - cron: "00 12 * * *"
  push:
    paths:
      - "**.js"
      - "!**/push.yml"
      - "build/**"
      - "release.json"
    branches: [main]
  pull_request:
    branches: [main]
#
jobs:
  test-1:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [windows-latest, macos-latest]
        os: [ubuntu-latest, windows-2022, macos-latest]
        node-version: [14]
      fail-fast: false
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: Get short SHA 🔑
        id: slug
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
        shell: bash

      - name: Checkout ${{ steps.slug.outputs.sha7 }} ⬇️
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}

      - name: Get last commit date
        id: vars
        run: |
          git fetch --prune --unshallow
          echo "::set-output name=commit::$(git log -1 --pretty=%B --author="Alphabiz-Team")"
          echo "::set-output name=commit-version::$(git log -1 --pretty=%B --author="Alphabiz-Team" | perl -wnE'say for /(?<=v)\d+\.\d+\.\d+/g')"
          echo "::set-output name=commit-date::$(git log -1 --pretty=%B --author="Alphabiz-Team" | perl -wnE'say for /(?<=-)\d{8,12}(?=-)/g')"
          echo "::set-output name=commit-sha7::$(git log -1 --pretty=%B --author="Alphabiz-Team" | perl -wnE'say for /(?<=-)\w{7}(?=-)/g')"
          echo "::set-output name=commit-message::$(git log -1 --pretty=%B --author="Alphabiz-Team" | perl -wnE'say for /\d{8,12}-\w+/g')"
          echo "::set-output name=date::$(git log -1 --date=format:'%Y%m%d' --author="Alphabiz-Team" --format='%cd')"
          echo "::set-output name=tag::$(git describe --abbrev=0 --tags)"
          echo "::set-output name=current-hour::$(date +'%H')"
          echo "::set-output name=release-date::$(git log -1 --date=format:'%Y-%m-%d' --format='%cd' --author="Alphabiz-Team")"
          if [[ ${{ matrix.os }} = "ubuntu-latest" ]] ; \
          then echo "::set-output name=system::ubuntu" ; \
          elif [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then echo "::set-output name=system::macos" ; \
          elif [[ ${{ matrix.os }} = "windows-2022" ]] ; \
          then echo "::set-output name=system::windows" ; \
          fi
          export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only)
          echo "MODIFIED_FILE_LIST<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FILE_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      # 获取所以今天 作者为Alphabiz-Team的commit message,正则:不匹配'[-]符号'前面的任意字符、不匹配空行
      # export DESCRIBE=$(git log --reverse --after="${{ steps.vars.outputs.release-date }} 00:00" --before="${{ steps.vars.outputs.release-date }} 23:59" --author="Alphabiz-Team" --pretty='format:%B' | perl -wnE'say for /(?!.*-)(?!\s).*\w+$/gm')
      - name: Get today all commit message
        run: |
          export DESCRIBE=$(cat test/github-describe/github-describe.txt)
          echo "$DESCRIBE"
          echo "DESCRIBE<<EOF" >> $GITHUB_ENV
          echo "$DESCRIBE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Checkout vars-date ${{ steps.vars.outputs.date }} ⬇️
        run: |
          echo "system: ${{ steps.vars.outputs.system }}"
          echo "commit: ${{ steps.vars.outputs.commit }}"
          echo "commit-version: ${{ steps.vars.outputs.commit-version }}"
          echo "commit-date: ${{ steps.vars.outputs.commit-date }}"
          echo "commit-sha7: ${{ steps.vars.outputs.commit-sha7 }}"
          echo "commit-message: ${{ steps.vars.outputs.commit-message }}"
          echo "${{ steps.vars.outputs.date }}"
          echo "${{ steps.vars.outputs.tag }}"
          echo "current-hour: ${{ steps.vars.outputs.current-hour }}"
          echo "----------------------"
          echo "MODIFIED_FILE_LIST: ${{ env.MODIFIED_FILE_LIST }}"
          echo "----------------------"
          echo "${{ env.DESCRIBE }}"

      - name: Get release.json property
        id: release
        if: contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          content=`cat ./release.json`
          content="${content//'%'/'%25'}"
          if [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then content="${content//$'\n'/%0A}" ; \
          else content="${content//$'\n'/'%0A'}" ; \
          fi
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=releaseJson::$content"
          echo "RELEASE_JSON<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Checkout release.json property
        if: contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          echo "target-tag-name: ${{ fromJson(steps.release.outputs.releaseJson).target-tag-name }}"
          echo "new-tag-name: ${{ fromJson(steps.release.outputs.releaseJson).new-tag-name }}"
          echo "--------------------------"
          echo "${{ env.RELEASE_JSON }}"
        shell: bash

      - name: Install dependencies 👨🏻‍💻
        run: yarn
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}
          GITHUB_PAT: ${{ secrets.PAT }}

      - name: Install UnPackaged 👨🏻‍💻
        run: yarn unpackaged
        shell: bash

      - name: E2E Test for Electron 🧪
        run: yarn test:e2e:electron

      - name: E2E Test 🧪
        run: yarn test:e2e:ci

      - name: Upload Test Results 🗃
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-output"
          path: test/output/**

      #后面的step晚上运行

      - name: Run electron-packager
        if: contains(steps.vars.outputs.current-hour, '12')
        run: yarn packager

      - name: Package for ${{ matrix.os }}-nightly-${{ steps.vars.outputs.commit-message }} Release 🗜️
        if: contains(steps.vars.outputs.current-hour, '12')
        run: 7z a -t7z -mx=9 alphabiz-${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-message }}-${{ steps.vars.outputs.system }}.7z ./build/electron -xr!UnPackaged

      - name: Pack app 📦
        if: contains(steps.vars.outputs.current-hour, '12')
        run: |
          export PATH=$PATH:/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin
          export BUILD_VERSION=${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-date }}
          yarn make
        shell: bash

      - name: Release alphabiz-${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-message }}-${{ steps.vars.outputs.system }}.7z to GitHub 📰
        if: contains(steps.vars.outputs.current-hour, '12')
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          name: alphabiz-${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-sha7 }}
          tag_name: ${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-message }}
          body: ${{ env.DESCRIBE }}
          files: |
            alphabiz-${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-message }}-${{ steps.vars.outputs.system }}.7z
            ./out/installers/${{ steps.vars.outputs.commit-version }}-nightly-${{ steps.vars.outputs.commit-date }}/**
