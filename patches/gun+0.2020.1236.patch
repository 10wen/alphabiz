diff --git a/node_modules/gun/gun.js b/node_modules/gun/gun.js
index 5db12d4..9bdb361 100644
--- a/node_modules/gun/gun.js
+++ b/node_modules/gun/gun.js
@@ -1635,7 +1635,11 @@
 			root.on('bye', function(peer, tmp){
 				peer = opt.peers[peer.id || peer] || peer;
 				this.to.next(peer);
-				peer.bye? peer.bye() : (tmp = peer.wire) && tmp.close && tmp.close();
+				if (peer.bye) {
+          peer.bye();
+        } else if(peer.wire && peer.wire.close){
+          peer.wire.close();
+        }
 				delete opt.peers[peer.id];
 				peer.wire = null;
 			});
@@ -1686,16 +1690,23 @@
 
 			var wire = mesh.wire || opt.wire;
 			mesh.wire = opt.wire = open;
+
+      // console.log('%cGunPatch:enable', 'background-color: gainsboro; padding: 2px 8px;')
+
 			function open(peer){ try{
 				if(!peer || !peer.url){ return wire && wire(peer) }
 				var url = peer.url.replace(/^http/, 'ws');
 				var wire = peer.wire = new opt.WebSocket(url);
 				wire.onclose = function(){
 					opt.mesh.bye(peer);
-					reconnect(peer);
+					// disable internal reconnect
+					// reconnect(peer);
 				};
 				wire.onerror = function(error){
-					reconnect(peer);
+          // opt.mesh.bye(peer);
+          // console.log('wire.onerror', error)
+          // disable internal reconnect
+					// reconnect(peer);
 				};
 				wire.onopen = function(){
 					opt.mesh.hi(peer);
diff --git a/node_modules/gun/lib/webrtc.js b/node_modules/gun/lib/webrtc.js
index abc887c..cdae5e6 100644
--- a/node_modules/gun/lib/webrtc.js
+++ b/node_modules/gun/lib/webrtc.js
@@ -42,66 +42,95 @@
 			setTimeout(opt.announce, 1);
 		});
 		root.on('in', function(msg){
-			if(msg.rtc){ open(msg) }
+      if(msg.rtc){
+        try {
+          console.log('in msg', msg.rtc.offer.sdp)
+        } catch {}
+        open(msg)
+      }
 			this.to.next(msg);
 		});
 
 		function open(msg){
-			var rtc = msg.rtc, peer, tmp;
-			if(!rtc || !rtc.id){ return }
-			delete opt.announce[rtc.id]; /// remove after connect
-			if(tmp = rtc.answer){
-				if(!(peer = opt.peers[rtc.id] || open[rtc.id]) || peer.remoteSet){ return }
-				tmp.sdp = tmp.sdp.replace(/\\r\\n/g, '\r\n')
-				return peer.setRemoteDescription(peer.remoteSet = new opt.RTCSessionDescription(tmp)); 
-			}
-			if(tmp = rtc.candidate){
-				peer = opt.peers[rtc.id] || open[rtc.id] || open({rtc: {id: rtc.id}});
-				return peer.addIceCandidate(new opt.RTCIceCandidate(tmp));
-			}
-			//if(opt.peers[rtc.id]){ return }
-			if(open[rtc.id]){ return }
-			(peer = new opt.RTCPeerConnection(opt.rtc)).id = rtc.id;
-			var wire = peer.wire = peer.createDataChannel('dc', opt.rtc.dataChannel);
-			open[rtc.id] = peer;
-			wire.onclose = function(){
-				delete open[rtc.id];
-				mesh.bye(peer);
-				//reconnect(peer);
-			};
-			wire.onerror = function(err){};
-			wire.onopen = function(e){
-				//delete open[rtc.id];
-				mesh.hi(peer);
-			}
-			wire.onmessage = function(msg){
-				if(!msg){ return }
-				mesh.hear(msg.data || msg, peer);
-			};
-			peer.onicecandidate = function(e){ // source: EasyRTC!
-        if(!e.candidate){ return }
-        root.on('out', {'@': msg['#'], rtc: {candidate: e.candidate, id: opt.pid}});
-			}
-			peer.ondatachannel = function(e){
-				var rc = e.channel;
-				rc.onmessage = wire.onmessage;
-				rc.onopen = wire.onopen;
-				rc.onclose = wire.onclose;
-			}
-			if(tmp = rtc.offer){
-				rtc.offer.sdp = rtc.offer.sdp.replace(/\\r\\n/g, '\r\n')
-				peer.setRemoteDescription(new opt.RTCSessionDescription(tmp)); 
-				peer.createAnswer(function(answer){
-					peer.setLocalDescription(answer);
-					root.on('out', {'@': msg['#'], rtc: {answer: answer, id: opt.pid}});
-				}, function(){}, opt.rtc.sdp);
-				return;
-			}
-			peer.createOffer(function(offer){
-				peer.setLocalDescription(offer);
-				root.on('out', {'@': msg['#'], rtc: {offer: offer, id: opt.pid}});
-			}, function(){}, opt.rtc.sdp);
-			return peer;
+        var rtc = msg.rtc, peer, tmp;
+        if (!rtc || !rtc.id) {
+          return
+        }
+        delete opt.announce[rtc.id]; /// remove after connect
+        if (tmp = rtc.answer) {
+          if (!(peer = opt.peers[rtc.id] || open[rtc.id]) || peer.remoteSet) {
+            return
+          }
+          tmp.sdp = tmp.sdp.replace(/\\r\\n/g, '\r\n')
+          return peer.setRemoteDescription(peer.remoteSet = new opt.RTCSessionDescription(tmp));
+        }
+        if (tmp = rtc.candidate) {
+          peer = opt.peers[rtc.id] || open[rtc.id] || open({rtc: {id: rtc.id}});
+          return peer.addIceCandidate(new opt.RTCIceCandidate(tmp));
+        }
+        //if(opt.peers[rtc.id]){ return }
+        if (open[rtc.id]) {
+          return
+        }
+        (peer = new opt.RTCPeerConnection(opt.rtc)).id = rtc.id;
+        var wire = peer.wire = peer.createDataChannel('dc', opt.rtc.dataChannel);
+        open[rtc.id] = peer;
+        wire.onclose = function () {
+          delete open[rtc.id];
+          mesh.bye(peer);
+          //reconnect(peer);
+        };
+        wire.onerror = function (err) {
+        };
+        wire.onopen = function (e) {
+          //delete open[rtc.id];
+          mesh.hi(peer);
+        }
+        wire.onmessage = function (msg) {
+          if (!msg) {
+            return
+          }
+          mesh.hear(msg.data || msg, peer);
+        };
+        peer.onicecandidate = function (e) { // source: EasyRTC!
+          if (!e.candidate) {
+            return
+          }
+          root.on('out', {'@': msg['#'], rtc: {candidate: e.candidate, id: opt.pid}});
+        }
+        peer.ondatachannel = function (e) {
+          var rc = e.channel;
+          rc.onmessage = wire.onmessage;
+          rc.onopen = wire.onopen;
+          rc.onclose = wire.onclose;
+        }
+        if (tmp = rtc.offer) {
+          console.log('org sdp', rtc.offer.sdp)
+          // rtc.offer.sdp = rtc.offer.sdp.replace(/\\r\\n/g, '\r\n')
+          rtc.offer.sdp = rtc.offer.sdp.replace(/\\+r/g, '\r').replace(/\\+n/g, '\n')
+          console.log('new sdp', rtc.offer.sdp)
+          console.log('>>>>>>>>>>>>>> i')
+          const rtcsd = new opt.RTCSessionDescription(tmp)
+          console.log(rtcsd)
+          peer.setRemoteDescription(rtcsd)
+            .catch(e=>{
+              console.log('>>>>>>>>>>>>>> e', e, msg)
+              throw e
+            });
+
+          peer.createAnswer(function (answer) {
+            peer.setLocalDescription(answer);
+            root.on('out', {'@': msg['#'], rtc: {answer: answer, id: opt.pid}});
+          }, function () {
+          }, opt.rtc.sdp);
+          return;
+        }
+        peer.createOffer(function (offer) {
+          peer.setLocalDescription(offer);
+          root.on('out', {'@': msg['#'], rtc: {offer: offer, id: opt.pid}});
+        }, function () {
+        }, opt.rtc.sdp);
+        return peer;
 		}
 	});
 	var noop = function(){};
