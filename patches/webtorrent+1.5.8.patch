diff --git a/node_modules/webtorrent/index.js b/node_modules/webtorrent/index.js
index 3e07d04..5c871bc 100644
--- a/node_modules/webtorrent/index.js
+++ b/node_modules/webtorrent/index.js
@@ -98,7 +98,10 @@ class WebTorrent extends EventEmitter {
 
     this.throttleGroups = {
       down: new ThrottleGroup({ rate: Math.max(this._downloadLimit, 0), enabled: this._downloadLimit >= 0 }),
-      up: new ThrottleGroup({ rate: Math.max(this._uploadLimit, 0), enabled: this._uploadLimit >= 0 })
+      // upload groups
+      low: new ThrottleGroup({ rate: 51200, enabled: true }),
+      mid: new ThrottleGroup({ rate: Math.max(this._uploadLimit * 0.3, this._uploadLimit > 0 ? 0 : 300000), enabled: true }),
+      high: new ThrottleGroup({ rate: Math.max(this._uploadLimit * 0.7, 0), enabled: this._uploadLimit >= 0 })
     }
 
     if (this.tracker) {
@@ -454,13 +457,23 @@ class WebTorrent extends EventEmitter {
    * Set global upload throttle rate
    * @param  {Number} rate (must be bigger or equal than zero, or -1 to disable throttling)
    */
-  throttleUpload (rate) {
+  throttleUpload (rate, radix = 0.7) {
     rate = Number(rate)
     if (isNaN(rate) || !isFinite(rate) || rate < -1) return false
+    radix = Number(radix)
+    if (isNaN(radix) || !isFinite(radix) || radix < 0 || radix > 1) return false
     this._uploadLimit = rate
-    if (this._uploadLimit < 0) return this.throttleGroups.up.setEnabled(false)
-    this.throttleGroups.up.setEnabled(true)
-    this.throttleGroups.up.setRate(this._uploadLimit)
+    this._throttleRadix = radix
+    if (this._uploadLimit < 0) {
+      this.throttleGroups.high.setEnabled(false)
+      this.throttleGroups.mid.setEnabled(true)
+      this.throttleGroups.mid.setRate(300000)
+      return
+    }
+    this.throttleGroups.high.setEnabled(true)
+    this.throttleGroups.mid.setEnabled(true)
+    this.throttleGroups.high.setRate(parseInt(this._uploadLimit * radix))
+    this.throttleGroups.mid.setRate(parseInt(this._uploadLimit * (1 - radix)))
   }
 
   /**
@@ -501,7 +514,9 @@ class WebTorrent extends EventEmitter {
     this.dht = null
 
     this.throttleGroups.down.destroy()
-    this.throttleGroups.up.destroy()
+    this.throttleGroups.low.destroy()
+    this.throttleGroups.mid.destroy()
+    this.throttleGroups.high.destroy()
   }
 
   _onListening () {
diff --git a/node_modules/webtorrent/lib/peer.js b/node_modules/webtorrent/lib/peer.js
index 19cb5ff..8cd6538 100644
--- a/node_modules/webtorrent/lib/peer.js
+++ b/node_modules/webtorrent/lib/peer.js
@@ -267,8 +267,11 @@ class Peer extends EventEmitter {
 
   setThrottlePipes () {
     const self = this
+    // Patched by Alphabiz: ban non-alphabiz peers
+    this.wire._uploadThrottle = this.throttleGroups.low.throttle()
+    this.wire._downloadThrottle = this.throttleGroups.down.throttle()
     this.conn
-      .pipe(this.throttleGroups.down.throttle())
+      .pipe(this.wire._downloadThrottle)
       .pipe(new Transform({
         transform (chunk, _, callback) {
           self.emit('download', chunk.length)
@@ -277,7 +280,7 @@ class Peer extends EventEmitter {
         }
       }))
       .pipe(this.wire)
-      .pipe(this.throttleGroups.up.throttle())
+      .pipe(this.wire._uploadThrottle)
       .pipe(new Transform({
         transform (chunk, _, callback) {
           self.emit('upload', chunk.length)
@@ -381,7 +384,12 @@ class Peer extends EventEmitter {
       conn.on('error', () => {})
       conn.destroy()
     }
-    if (wire) wire.destroy()
+    if (wire) {
+      wire.destroy()
+      // Fix throttles memory leak
+      wire._uploadThrottle && wire._uploadThrottle.destroy()
+      wire._downloadThrottle && wire._downloadThrottle.destroy()
+    }
     if (swarm) swarm.removePeer(this.id)
   }
 }
diff --git a/node_modules/webtorrent/lib/torrent.js b/node_modules/webtorrent/lib/torrent.js
index ac7cb97..db16993 100644
--- a/node_modules/webtorrent/lib/torrent.js
+++ b/node_modules/webtorrent/lib/torrent.js
@@ -64,6 +64,54 @@ try {
   TMP = path.join(typeof os.tmpdir === 'function' ? os.tmpdir() : '/', 'webtorrent')
 }
 
+const toVerify = []
+let isVerifing = false
+/** @param { (cb: Function) => void } fn */
+const queueVerify = (fn, tr) => {
+  const callFn = () => {
+    isVerifing = true
+    if (tr) tr.waiting = false
+    // let client have time to do something
+    setTimeout(() => {
+      console.log('Verifying', tr.name || tr.origin || tr.token || tr.infoHash)
+      fn(() => {
+        if (!isVerifing) return
+        isVerifing = false
+        const next = toVerify.shift()
+        if (typeof next === 'function') {
+          // console.log('Run next', toVerify.length)
+          next()
+        // } else {
+        //   console.log('Empty queue')
+        }
+      })
+    }, 1000)
+  }
+  if (tr) {
+    tr.waiting = true
+    tr.once('close', () => {
+      const index = toVerify.findIndex(i => i === callFn)
+      if (index !== -1) {
+        toVerify.splice(index, 1)
+        isVerifing = false
+        if (toVerify.length) {
+          const next = toVerify.shift()
+          if (typeof next === 'function') {
+            next()
+          }
+        }
+      }
+    })
+  }
+  if (isVerifing) {
+    toVerify.push(callFn)
+    // console.log('Queue', toVerify.length)
+  } else {
+    // console.log('Call')
+    callFn()
+  }
+}
+
 class Torrent extends EventEmitter {
   constructor (torrentId, client, opts) {
     super()
@@ -596,31 +644,39 @@ class Torrent extends EventEmitter {
   }
 
   _verifyPieces (cb) {
-    parallelLimit(this.pieces.map((piece, index) => cb => {
-      if (this.destroyed) return cb(new Error('torrent is destroyed'))
-
-      const getOpts = {}
-      // Specify length for the last piece in case it is zero-padded
-      if (index === this.pieces.length - 1) {
-        getOpts.length = this.lastPieceLength
+    /** @param { Function } done */
+    const mission = (done) => {
+      const callDone = (...args) => {
+        done()
+        cb(...args)
       }
-      this.store.get(index, getOpts, (err, buf) => {
+      parallelLimit(this.pieces.map((piece, index) => cb => {
         if (this.destroyed) return cb(new Error('torrent is destroyed'))
 
-        if (err) return queueMicrotask(() => cb(null)) // ignore error
-        sha1(buf, hash => {
+        const getOpts = {}
+        // Specify length for the last piece in case it is zero-padded
+        if (index === this.pieces.length - 1) {
+          getOpts.length = this.lastPieceLength
+        }
+        this.store.get(index, getOpts, (err, buf) => {
           if (this.destroyed) return cb(new Error('torrent is destroyed'))
 
-          if (hash === this._hashes[index]) {
-            this._debug('piece verified %s', index)
-            this._markVerified(index)
-          } else {
-            this._debug('piece invalid %s', index)
-          }
-          cb(null)
+          if (err) return queueMicrotask(() => cb(null)) // ignore error
+          sha1(buf, hash => {
+            if (this.destroyed) return cb(new Error('torrent is destroyed'))
+
+            if (hash === this._hashes[index]) {
+              this._debug('piece verified %s', index)
+              this._markVerified(index)
+            } else {
+              this._debug('piece invalid %s', index)
+            }
+            cb(null)
+          })
         })
-      })
-    }), FILESYSTEM_CONCURRENCY, cb)
+      }), FILESYSTEM_CONCURRENCY, callDone)
+    }
+    queueVerify(mission, this)
   }
 
   rescanFiles (cb) {
@@ -753,6 +809,8 @@ class Torrent extends EventEmitter {
     this._peers = null
     this._servers = null
     this._xsRequests = null
+
+    this.removeAllListeners()
   }
 
   addPeer (peer) {
@@ -1144,6 +1202,7 @@ class Torrent extends EventEmitter {
     })
 
     wire.once('close', () => {
+      wire.ut_metadata = null
       clearTimeout(timeoutId)
     })
 
diff --git a/node_modules/webtorrent/lib/utp.js b/node_modules/webtorrent/lib/utp.js
index 2cde3f4..21956e3 100644
--- a/node_modules/webtorrent/lib/utp.js
+++ b/node_modules/webtorrent/lib/utp.js
@@ -1,8 +1,3 @@
-module.exports = (() => {
-  try {
-    return require('utp-native')
-  } catch (err) {
-    console.warn('WebTorrent: uTP not supported')
-    return {}
-  }
-})()
+// Patched by Alphabiz
+// the `utp-native` causes memory leak in electron, disable it
+module.exports = {}
